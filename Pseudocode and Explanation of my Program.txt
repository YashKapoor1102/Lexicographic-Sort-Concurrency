Name: Yash Kapoor

					Psuedocode and Discussion
Pseudocode of my Program:

variable_declarations() {

	char temp[256];
	char letter;
	char temp;
	char debugMode;

}

initialization_code() {

	S->Value = 1;	// initializing semaphore

	// initializing shared memory
	shared_array[7] = shared_stuff_between_all_processes;
}

main() {

	for(int initialize = 0; initialize < 7; initialize++) {
		shared_array[initialize] = ' ';
	}
		
	for(letters = 0; letters < 7; letters++) {
		found = 0;

		letter = input("Enter letter: "); 
		
		letter = temp[0];

		for(int checkDuplicates = 0; checkDuplicates < 7; checkDuplicates++) {
			if(shared_array[checkDuplicates] == letter.tolower()) {
				found = 1;
				break;
			}
		}

		if(found) {
			print("\nSorry! You did not enter a distinct letter. Try again!\n\n");
			letters = letters - 1;
		}
		else if (letter.isalpha()) {
			print("\nSorry! You must enter an alphabet. Try again!\n\n");
			letters = letters - 1;
		}
		else {
			shared_array[letters] = letter.tolower();
		}
	}

	print("Unsorted List: ");
	for (int i = 0; i < 7; i++) {
		print(shared_array[i]);
	}
	print("\n");

	
	debugMode = input("Do you want to run this program in debug mode? (Y/N): ");
	print("\n");

	if (process_one) {	
	
		wait(S);
		
		print("\n");

		int j;
		for(int i = 1; i < 3; i++) {
			int check = 0;
			j = i;
			while(j >= 0 and shared_array[j - 1] > shared_array[j]) 	{
				check = 1;
				swap shared_array[j] and shared_array[j - 1]
				j = j - 1;
			}
			if(check == 1 and (debugMode == 'Y' or debugMode == 'y')) {
				print("\nProcess P1: Performed Swapping");
			}
			if(check == 0 and (debugMode == 'Y' or debugMode == 'y')) {
				print("\nProcess P1: No Swapping");
			}

		}

		signal(S)
		
				
	}
	else if (process_two) {	
		sleep(1);	
		wait(S);
		
		print("\n");

		int j;
		for(int i = 3; i < 5; i++) {
			int check = 0;
			j = i;
			while(j >= 0 and shared_array[j - 1] > shared_array[j]) 	{
				check = 1;
				swap shared_array[j] and shared_array[j - 1]
				j = j - 1;
			}
			if(check == 1 and (debugMode == 'Y' or debugMode == 'y')) {
				print("\nProcess P2: Performed Swapping");
			}
			if(check == 0 and (debugMode == 'Y' or debugMode == 'y')) {
				print("\nProcess P2: No Swapping");
			}

		}

		signal(S)
	}
	else {		
		sleep(2);	
		wait(S);
		
		print("\n");

		int j;
		for(int i = 5; i < 7; i++) {
			int check = 0;
			j = i;
			while(j >= 0 and shared_array[j - 1] > shared_array[j]) 	{
				check = 1;
				swap shared_array[j] and shared_array[j - 1]
				j = j - 1;
			}
			if(check == 1 and (debugMode == 'Y' or debugMode == 'y')) {
				print("\nProcess P3: Performed Swapping");
			}
			if(check == 0 and (debugMode == 'Y' or debugMode == 'y')) {
				print("\nProcess P3: No Swapping");
			}

		}

		print("\n");
		print("\nList in lexicographic order: ");
		for(int j = 0; j < 7; j++) {
			print(shared_array[j]);	
		}
		
		print("\n");

		signal(S)

	}			
}
	

Discussion of how this program correctly sorts the array into lexicographic order:

There is a shared array between each process (Process 1, Process 2, and Process 3). Each
process is responsible for sorting part of the array. Specifically, process 1 is responsible
for sorting the first letter, second letter, and third letter, process 2 is responsible for
sorting the third letter, fourth letter, and fifth letter, and process 3 is responsible for 
sorting the fifth letter, sixth letter, and seventh letter in the array. After process 3
is finished executing, the array is fully sorted in lexicographic order. 

Each process uses the insertion sort algorithm to sort their designated part of the array.
For example, I want to sort the following list in lexicographic order:

(X, A, z, M, W, y, D) -> first gets converted to lowercase -> (x, a, z, m, w, y, d)

Firstly, process 1 will perform insertion sort on the first 3 letters in the array (x, a, z). 
It will compare "a" with "x" and realize that they are not in lexicographic order, so it will 
swap the two letters. Then, it will compare "z" with "x" and "a" and not perform the swap because
they are already in lexicographic order. A swap will be performed once.
Hence, the modified array will be (a, x, z, m, w, y, d) after process 1 is done executing. 

Secondly, process 2 will perform insertion sort on the next 3 letters in the modified array 
(z, m, w). It will compare "m" with "z", "x", and "a" and realize that they are not in 
lexicographic order, so it will place "m" after "a". Then, it will compare "w" with "z", "x", "m",
and "a", and place it after "m". A swap will be performed twice. Hence, the modified array will 
be (a, m, w, x, z, y, d) after process 2 is done executing.

Lastly, process 3 will perform insertion sort on the next 3 letters in the modified array 
(z, y, d). It will compare "y" with "z", "x", "m", "w", and "a" and realize that they are not in 
lexicographic order, so it will place "y" after "x". Then, it will compare "d" with "z", "y", "x",
"m", "w", and "a" and realize that it is not in correct position, so it will perform the swap,
placing "d" after "a" to put everything in lexicographic order. A swap will be performed twice.
Hence, by this point, all comparisons have been performed and the entire array is in 
lexicographic order (a, d, m, w, x, y, z). This array is then printed to the user.

Whichever process acquires the semaphore first is the process that runs. The other two processes
are blocked and wait for that specific process to release the semaphore, so one of them can 
acquire it. In this case, process 1 acquires the semaphore first and S->Value gets decremented, 
meaning it equals 0 since it was initialized to 1. Hence, when process 2 tries to acquire the 
semaphore, S->Value gets decremented, meaning it equals -1; therefore, process 2 is blocked and 
cannot acquire the semaphore. Process 2 is added to S->list (list that contains all blocked 
processes). Similarly, process 3 is blocked as well and gets added to S->list. Once process 1 
finishes execution, it releases the semaphore and S->Value gets incremented, meaning it equals 0. 
Hence, process 2 is removed from S->list, acquires the semaphore, and starts executing. S->Value 
is decremented to -1 again, indicating that process 3 is still blocked. Once process 2 finishes
execution, it releases the semaphore. Hence, process 3 is removed from S->list, acquires the 
semaphore, and starts executing. Once process 3 finishes execution, it releases the semaphore and
the array is sorted in lexicographic order.  






